document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', e => {
    e.preventDefault();
    document.querySelector(anchor.getAttribute('href')).scrollIntoView({ behavior: 'smooth' });
  });
});

function randomNumber() {
    alert("–ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ, —É–¥–∞—á–∏!");
    const number = Math.floor(Math.random() * 101);
    let userAnswer;
    while (userAnswer !== number) {
        userAnswer = Number(prompt("–¢–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç?"));
        if (number === userAnswer) {
            alert("–£—Ä–∞–∞–∞, —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è! –ñ–¥–µ–º —Ç–µ–±—è –µ—â–µ! üòâ");
            break;
        } else {
            if (number > userAnswer) {
                alert("–≠—Ç–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!");
            } else{
                alert("–≠—Ç–æ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
            }
        }
    }
}

function randomTask(){
    alert("–ü–æ–ø—Ä–æ–±—É–π —Ä–µ—à–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É, —É–¥–∞—á–∏!");
    const operators = ['+', '-', '*', '/']
    const num1 = Math.floor(Math.random() * 101);
    let num2 = Math.floor(Math.random() * 101);
    const operator = operators[Math.floor(Math.random() * operators.length)];
    if (operator === '/' && num2 === 0){
        num2 = 1;
    }
    let task = `${num1} ${operator} ${num2}`;
    const userAnswer = Number(prompt(task));
    if (operator === '-') {
      answer=num1-num2;
    } else if (operator === '+') {
      answer=num1+num2;
    } else if (operator === '*') {
      answer=num1*num2;
    } else {
      answer=num1/num2;
    }
    if (userAnswer === answer) {
      alert('–ú–æ–ª–æ–¥–µ—Ü, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üòÄ');
    } else {
      alert('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –æ—à–∏–±—Å—è! üòî')
    }
}

function reverseText() {
    let userText = String(prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç!'));
    let text = userText.split('');
    let reverseText = text.reverse();
    let conclusion = reverseText.join('');
    alert(conclusion);
}

function quiz() {
  const quiz = [
    {
        question: "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –Ω–µ–±–æ?",
        options: ["1. –ö—Ä–∞—Å–Ω—ã–π", "2. –°–∏–Ω–∏–π", "3. –ó–µ–ª–µ–Ω—ã–π"],
        correctAnswer: 2 
    },
    {
        question: "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª–µ?",
        options: ["1. –®–µ—Å—Ç—å", "2. –°–µ–º—å", "3. –í–æ—Å–µ–º—å"],
        correctAnswer: 2
    },
    {
        question: "–°–∫–æ–ª—å–∫–æ —É —á–µ–ª–æ–≤–µ–∫–∞ –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Ä—É–∫–µ?",
        options: ["1. –ß–µ—Ç—ã—Ä–µ", "2. –ü—è—Ç—å", "3. –®–µ—Å—Ç—å"],
        correctAnswer: 2
    }
];
  alert('–í–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞, —É–¥–∞—á–∏! üòâ');
  const arrAnswer = ['–°–∏–Ω–∏–π','–°–µ–º—å','–ü—è—Ç—å'];
  let count = 0;
  for (let i = 0; i < quiz.length; i++) {
    alert(`${i + 1}. –í–æ–ø—Ä–æ—Å: ${quiz[i].question}`);
    const userAnswer = prompt(`${quiz[i].options.join(' ')}`);
    if (userAnswer.toLowerCase() === quiz[i].correctAnswer.toString().toLowerCase() || userAnswer.toLowerCase() === arrAnswer[i].toLowerCase()){
      alert('–í–µ—Ä–Ω–æ! üòÄ');
      count++;
    } else {
      alert('–ù–µ –≤–µ—Ä–Ω–æ! üòî')
    }
  }
  alert(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${count}`);
}

function rockScissorsPaper() {
  const choice = prompt('–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞?');
  if (choice.toLowerCase() === '–∫–∞–º–µ–Ω—å' || 
      choice.toLowerCase() === '–Ω–æ–∂–Ω–∏—Ü—ã' || 
      choice.toLowerCase() === '–±—É–º–∞–≥–∞') {
        let arrChoice = ['–∫–∞–º–µ–Ω—å','–Ω–æ–∂–Ω–∏—Ü—ã','–±—É–º–∞–≥–∞'];
        let randomIndex = Math.floor(Math.random()*3);
        const compChoice = arrChoice[randomIndex];
      
        alert(`–í—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: "${compChoice}", –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${choice}"`)
      
        if (compChoice.toLowerCase() === choice.toLowerCase()) {
          alert('–ù–∏—á—å—è! üòâ')
        } else if ((compChoice.toLowerCase() === '–∫–∞–º–µ–Ω—å' && choice.toLowerCase() === '–Ω–æ–∂–Ω–∏—Ü—ã') ||
                   (compChoice.toLowerCase() === '–Ω–æ–∂–Ω–∏—Ü—ã' && choice.toLowerCase() === '–±—É–º–∞–≥–∞') || 
                   (compChoice.toLowerCase() === '–±—É–º–∞–≥–∞' && choice.toLowerCase() === '–∫–∞–º–µ–Ω—å')) {
          alert('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üòî')
        } else {
          alert('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üòÄ')
        } 
  } else {
    alert('–í—ã –≤–≤–µ–ª–∏ –±–µ–ª–∏–±–µ—Ä–¥—É! ü§î')
  }

}

const btnBackgrondColor = document.querySelector('.catalog-games__button_generator')
function getRandomColor() {
  let r = Math.floor(Math.random() * 256);
  let g = Math.floor(Math.random() * 256);
  let b = Math.floor(Math.random() * 256);

  return "rgb(" + r + "," + g + "," + b + ")";
}
btnBackgrondColor.addEventListener('click', () =>{
  const gamesBackgroundColor = document.querySelector('.mini-games');
  let color = getRandomColor();
  gamesBackgroundColor.style.backgroundColor = color;
});


const btnClickHead = document.querySelector('.header__button');
btnClickHead.addEventListener('click', e=>{
  e.preventDefault();
  document.querySelector(btnClickHead.dataset.href).scrollIntoView({ behavior: 'smooth' });
});

const btnClickHeadMobile = document.querySelector('.header__mobile-button');
btnClickHeadMobile.addEventListener('click', e=>{
  e.preventDefault();
  document.querySelector(btnClickHeadMobile.dataset.href).scrollIntoView({ behavior: 'smooth' });
});